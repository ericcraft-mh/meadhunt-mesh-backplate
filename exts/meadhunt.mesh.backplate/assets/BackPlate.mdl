mdl 1.7;
import ::anno::*;
import ::base::*;
import ::df::*;
import ::limits::*;
import ::OmniSurface::OmniImage::*;
import ::tex::*;

base::texture_return multiply_colors(
    color color_1 = color(1.0, 1.0, 1.0),
    color color_2 = color(.5, .5, .5),
	float weight  = 1.0
) [[ 
    anno::hidden() 
]]
{
    return base::blend_color_layers(
        layers: base::color_layer[](
            base::color_layer(
                layer_color:    color_2,
                weight:         weight,
                mode:           base::color_layer_multiply
                )),
        base: color_1
    );
}

export material BackPlate(
    uniform texture_2d emission_image = texture_2d() [[ 
        anno::display_name("BackPlate"),
        anno::in_group("BackPlate")
    ]],
    uniform color emission_color = color(1.)
    [[
        anno::display_name("Image Tint"),
        anno::hard_range(color(0.), color(1.)),
        anno::in_group("BackPlate")
    ]],
    float intensity = float(1)
    [[
        anno::display_name("Intensity"),
        anno::soft_range(0.0f, 5.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX),
        anno::in_group("BackPlate")
    ]],
    float mult = 23000
    [[
        anno::display_name("Multiplier"),
        anno::hard_range(0.0f, 50000.0f),
        anno::in_group("BackPlate"),
        anno::hidden()
    ]],
    uniform bool dbl_sided = false
    [[
        anno::display_name("Double Sided"),
        anno::in_group("BackPlate")
    ]],

    //
    //::UVW::simplify UI by hiding parameters users don't need to edit
    //

    uniform float uvw_s_offset = 0.0f [[
        anno::display_name("Offset U"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(-1.0f, 1.0f)
    ]],
    uniform float uvw_t_offset = 0.0f [[
        anno::display_name("Offset V"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(-1.0f, 1.0f)
    ]],
    uniform float uvw_s_scale = 1.0f [[
        anno::display_name("Scale U"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(0.0f, 2.0f)
    ]],
    uniform float uvw_t_scale = 1.0f [[
        anno::display_name("Scale V"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(0.0f, 2.0f)
    ]],
    uniform bool uvw_s_flip = false [[
        anno::display_name("Flip U"),
        anno::in_group("UVW Coordinates")
    ]],
    uniform bool uvw_t_flip = false [[
        anno::display_name("Flip V"),
        anno::in_group("UVW Coordinates")
    ]],
    uniform bool uvw_swap_st = false [[
        anno::display_name("Swap UV"),
        anno::in_group("UVW Coordinates")
    ]]
) = let {
    base::texture_coordinate_info texture_coordinate_info = ::OmniSurface::OmniImage::compute_texture_coordinate_2(
        base::texture_coordinate_system(base::texture_coordinate_uvw),
        0,
        uvw_s_offset,
        uvw_t_offset,
        uvw_s_scale,
        uvw_t_scale,
        uvw_s_flip,
        uvw_t_flip,
        uvw_swap_st,
        ::OmniSurface::OmniImage::projection_mode(::OmniSurface::OmniImage::projection_planar),
        float3(0.0),
        float3(0.0),
        float3(1.0)
    );
    color emission_texture = ::OmniSurface::OmniImage::texture_lookup_2(
        emission_image,
        false,
        color(0.0, 0.0, 0.0),
        false,
        float2(0.0),
        ::OmniSurface::OmniImage::wrap_mode(::OmniSurface::OmniImage::wrap_periodic),
        ::OmniSurface::OmniImage::wrap_mode(::OmniSurface::OmniImage::wrap_periodic),
        texture_coordinate_info
    ).tint;
    color emission_color_image = multiply_colors(emission_texture, emission_color, 1.0).tint;
    color emission_tex = tex::texture_isvalid(emission_image) ? emission_color_image * 0.125 : emission_color;
    material_emission emission_mat(
        emission: df::diffuse_edf(),
        intensity: intensity * mult * emission_tex
    );
    material_surface emission_surf(
        emission: emission_mat
    );
} in material(
    surface: emission_surf,
    backface: emission_surf,
    thin_walled: dbl_sided
);